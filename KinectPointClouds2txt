
import org.openkinect.freenect.*;
import org.openkinect.processing.*;
Kinect kinect;
PrintWriter output;
int myFPS = 25;
float[] depthLookUp = new float[2048];
float fov = PI/6.0;
float cameraZ = (height/2.0) / tan(fov/2.0);



void setup() {
  size(800, 800, P3D);
  background(255);
  frameRate(myFPS);
  
  kinect = new Kinect(this);
  kinect.initDepth();

  // Lookup table for all possible depth values (0 - 2047)
  for (int i = 0; i < depthLookUp.length; i++) {
    depthLookUp[i] = rawDepthToMeters(i);
  }
  delay(200);
}






void draw() {
  
   output = createWriter("frame" + (frameCount -1) + ".txt"); 
  int vertexCounter = 0;
   background(255);
  
  int[] depth = kinect.getRawDepth();
  int skip = 8;

  cameraZ = mouseX * 0.1; 
  perspective(fov, float(width)/float(height), cameraZ/10.0, cameraZ*10.0);

  translate(width/2, height/2,  -50);

  // Nested for loop that initializes x and y pixels and, for those less than the
  // maximum threshold and at every skipping point, the offset is caculated to map
  // them on a plane instead of just a line
  for (int x = 0; x < kinect.width; x += skip) {
   
    for (int y = 0; y < kinect.height; y += skip) {
    
      int offset = x + y * kinect.width;

      // Convert kinect data to world xyz coordinate
      int rawDepth = depth[offset];
   
      PVector v = depthToWorld(x, y, rawDepth);
         
      stroke(0);
      pushMatrix();
      // Scale up by 200
      float factor = 200;
      translate(v.x*factor, v.y*factor, factor-v.z*factor);
      // Draw a point
      point(0, 0);
      popMatrix();
      
     
      output.println( vertexCounter + "," + v.x + "," + v.y + "," + v.z +","+ rawDepth );  // Write the coordinate to the file
     
      vertexCounter += 1;
   
    } 
    
    
  }

   output.flush();  // Writes the remaining data to the file
   output.close();  // Finishes the file


}


// These functions come from: http://graphics.stanford.edu/~mdfisher/Kinect.html
float rawDepthToMeters(int depthValue) {
  if (depthValue < 2047) {
    return (float)(1.0 / ((double)(depthValue) * -0.0030711016 + 3.3309495161));
  }
  return 0.0f;
}




// Only needed to make sense of the ouput depth values from the kinect
PVector depthToWorld(int x, int y, int depthValue) {

  final double fx_d = 1.0 / 5.9421434211923247e+02;
  final double fy_d = 1.0 / 5.9104053696870778e+02;
  final double cx_d = 3.3930780975300314e+02;
  final double cy_d = 2.4273913761751615e+02;

// Drawing the result vector to give each point its three-dimensional space
  PVector result = new PVector();
  double depth =  depthLookUp[depthValue];//rawDepthToMeters(depthValue);
  result.x = (float)((x - cx_d) * depth * fx_d);
  result.y = (float)((y - cy_d) * depth * fy_d);
  result.z = (float)(depth);

  

  return result;
}




void keyPressed() {
  exit();  // Stops the program
}
